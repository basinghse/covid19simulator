addCircleMarkers(data = reactive_db(), lat = ~ latitude, lng = ~ longitude, weight = 1, radius = ~(cases)^(1/5),
fillOpacity = 0.1, color = covid_col, group = "2019-COVID (cumulative)",
label = sprintf("<strong>%s (cumulative)</strong><br/>Confirmed cases: %g<br/>Deaths: %d<br/>Cases per 100,000: %g<br/>Deaths per 100,000: %g", reactive_db()$country, reactive_db()$cases, reactive_db()$deaths, reactive_db()$per100k, reactive_db()$deathsper100k) %>% lapply(htmltools::HTML),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px", "color" = covid_col),
textsize = "15px", direction = "auto")) %>%
addPolygons(data = reactive_polygons(), stroke = FALSE, smoothFactor = 0.1, fillOpacity = 0.15, fillColor = ~cv_pal(reactive_db_large()$deathsper100k)) %>%
addCircleMarkers(data = reactive_db_last24h(), lat = ~ latitude, lng = ~ longitude, weight = 1, radius = ~(new_cases)^(1/5),
fillOpacity = 0.1, color = covid_col, group = "2019-COVID (new)",
label = sprintf("<strong>%s (past 24h)</strong><br/>Confirmed cases: %g<br/>Deaths: %d<br/>Cases per 100,000: %g<br/>Deaths per 100,000: %g", reactive_db_last24h()$country, reactive_db_last24h()$new_cases, reactive_db_last24h()$new_deaths, reactive_db_last24h()$newper100k, reactive_db_last24h()$newdeathsper100k) %>% lapply(htmltools::HTML),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px", "color" = covid_col),
textsize = "15px", direction = "auto")) %>%
# addCircleMarkers(data = reactive_db(), lat = ~ latitude, lng = ~ longitude, weight = 1, radius = ~(active_cases)^(1/5),
#                  fillOpacity = 0.1, color = covid_col, group = "2019-COVID (active)",
#                  label = sprintf("<strong>%s (active)</strong><br/>Confirmed cases: %g<br/>Cases per 100,000: %g<br/><i><small>Excludes individuals known to have<br/>recovered (%g) or died (%g).</small></i>", reactive_db()$country, reactive_db()$active_cases, reactive_db()$activeper100k, reactive_db()$recovered, reactive_db()$deaths) %>% lapply(htmltools::HTML),
#                  labelOptions = labelOptions(
#                    style = list("font-weight" = "normal", padding = "3px 8px", "color" = covid_col),
#                    textsize = "15px", direction = "auto"))  %>%
addCircleMarkers(data = sars_final, lat = ~ latitude, lng = ~ longitude, weight = 1, radius = ~(cases)^(1/4),
fillOpacity = 0.2, color = sars_col, group = "2003-SARS",
label = sprintf("<strong>%s</strong><br/>SARS cases: %g<br/>Deaths: %d<br/>Cases per 100,000: %g", sars_final$country, sars_final$cases, sars_final$deaths, sars_final$per100k) %>% lapply(htmltools::HTML),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px", "color" = sars_col),
textsize = "15px", direction = "auto"))
})
output$cumulative_plot <- renderPlot({
cumulative_plot(cv_aggregated, input$plot_date)
})
output$epi_curve <- renderPlot({
new_cases_plot(cv_aggregated, input$plot_date)
})
# sars tab
sars_mod_date = reactive({
format(as.Date(input$sars_plot_date, format="%d %b %y"), "%Y-%m-%d")
})
output$sars_clean_date_reactive <- renderText({
format(as.POSIXct(sars_mod_date()),"%d %B %Y")
})
sars_reactive_db = reactive({
sars_cases %>% filter(date == sars_mod_date())
})
sars_reactive_db_large = reactive({
large_countries = sars_reactive_db() %>% filter(country!="Singapore" & country!="Diamond Princess Cruise Ship" & country!="Hong Kong" & country!="Macao")
large_countries = large_countries[order(large_countries$alpha3),]
large_countries
})
sars_reactive_polygons = reactive({
worldcountry[worldcountry$ADM0_A3 %in% sars_reactive_db_large()$alpha3, ]
})
output$sars_reactive_case_count <- renderText({
paste0(sum(sars_reactive_db()$cases), " cases")
})
output$sars_reactive_death_count <- renderText({
paste0(sum(sars_reactive_db()$deaths), " deaths")
})
output$sars_reactive_country_count <- renderText({
paste0(length(unique(sars_reactive_db()$country_group)), " countries/territories affected")
})
output$sars_map <- renderLeaflet({
sars_basemap
})
observeEvent(input$sars_plot_date, {
leafletProxy("sars_map") %>%
clearMarkers() %>%
clearShapes() %>%
addPolygons(data = sars_reactive_polygons(), stroke = FALSE, smoothFactor = 0.2, fillOpacity = 0.1, fillColor = ~sars_pal(sars_reactive_db_large()$per100k), group = "2003-SARS (cumulative)",
label = sprintf("<strong>%s</strong><br/>SARS cases: %g<br/>Deaths: %d<br/>Cases per 100,000: %g", sars_reactive_db_large()$country, sars_reactive_db_large()$cases, sars_reactive_db_large()$deaths, sars_reactive_db_large()$per100k) %>% lapply(htmltools::HTML),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px", "color" = sars_col),
textsize = "15px", direction = "auto")) %>%
addCircleMarkers(data = sars_reactive_db(), lat = ~ latitude, lng = ~ longitude, weight = 1, radius = ~(cases)^(1/4),
fillOpacity = 0.2, color = sars_col, group = "2003-SARS (cumulative)",
label = sprintf("<strong>%s</strong><br/>SARS cases: %g<br/>Deaths: %d<br/>Cases per 100,000: %g", sars_reactive_db()$country, sars_reactive_db()$cases, sars_reactive_db()$deaths, sars_reactive_db()$per100k) %>% lapply(htmltools::HTML),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px", "color" = sars_col),
textsize = "15px", direction = "auto")) %>%
addCircleMarkers(data = cv_today, lat = ~ latitude, lng = ~ longitude, weight = 1, radius = ~(cases)^(1/5),
fillOpacity = 0.1, color = covid_col, group = "2019-COVID",
label = sprintf("<strong>%s (cumulative)</strong><br/>Confirmed cases: %g<br/>Deaths: %d<br/>Cases per 100,000: %g", cv_today$country, cv_today$cases, cv_today$deaths, cv_today$per100k) %>% lapply(htmltools::HTML),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px", "color" = covid_col),
textsize = "15px", direction = "auto"))
})
output$sars_cumulative_plot <- renderPlot({
sars_cumulative_plot(sars_aggregated, sars_mod_date())
})
output$sars_epi_curve <- renderPlot({
sars_new_cases_plot(sars_aggregated, sars_mod_date())
})
# comparison plot
output$comparison_plot <- renderPlotly({
comparison_plot(epi_comp, input$comparison_metric)
})
# add footnote for cases
output$epi_notes_1 <- renderText({
if(input$comparison_metric=="cases") { paste0("Note that the axis is on a log10 scale so moves in 10-fold increments.
The 60.8 million estimated cases of H1N1 dwarf all other outbreaks of plotted on a standard linear scale.") }
})
# add footnote for deaths
output$epi_notes_2 <- renderText({
if(input$comparison_metric=="deaths") {
paste0("For H1N1, the number of laboratory-confirmed deaths reported by the WHO is displayed. Subsequent modelling studies have estimated the actual number to be in the range of 123,000 to 203,000.")
}
})
# add note for cfr
output$epi_notes_3 <- renderText({
if(input$comparison_metric=="cfr") {
paste0("For COVID-19, this displays the proportion of confirmed cases who have subsequently died. When factoring in mild or asymptomatic infections that are not picked up by case surveillance efforts, current estimates place the case fatality rate in the range of 0.3-1%.")
}
})
# update region selections
observeEvent(input$level_select, {
if (input$level_select=="Global") {
updatePickerInput(session = session, inputId = "region_select",
choices = "Global", selected = "Global")
}
if (input$level_select=="Continent") {
updatePickerInput(session = session, inputId = "region_select",
choices = c("Africa", "Asia", "Europe", "North America", "South America"),
selected = c("Africa", "Asia", "Europe", "North America", "South America"))
}
if (input$level_select=="US state") {
updatePickerInput(session = session, inputId = "region_select",
choices = as.character(cv_states_today[order(-cv_states_today$cases),]$state),
selected = cv_states_today$state)
}
if (input$level_select=="Country") {
updatePickerInput(session = session, inputId = "region_select",
choices = as.character(cv_today_reduced[order(-cv_today_reduced$cases),]$country),
selected = cv_today_reduced$country)
}
}, ignoreInit = TRUE)
# update region selections
observeEvent(input$level_Risk_select, {
if (input$level_select=="Country") {
updatePickerInput(session = session, inputId = "region_Risk_select",
choices = as.character(colnames(risk[2:176])),
selected = as.character(colnames(risk[2])))
}
}, ignoreInit = TRUE)
# create dataframe with selected countries
country_reactive_db = reactive({
if (input$level_select=="Global") {
db = cv_cases_global
db$region = db$global_level
}
if (input$level_select=="Continent") {
db = cv_cases_continent
db$region = db$continent
}
if (input$level_select=="Country") {
db = cv_cases
db$region = db$country
}
if (input$level_select=="US state") {
db = cv_states
db$region = db$state
}
if (input$outcome_select=="Cases (total)") {
db$outcome = db$cases
db$new_outcome = db$new_cases
}
if (input$outcome_select=="Deaths (total)") {
db$outcome = db$deaths
db$new_outcome = db$new_deaths
}
if (input$outcome_select=="Cases per 100,000") {
db$outcome = db$per100k
db$new_outcome = db$newper100k
}
if (input$outcome_select=="Deaths per 100,000") {
db$outcome = db$deathsper100k
db$new_outcome = db$newdeathsper100k
}
db %>% filter(region %in% input$region_select)
})
# country-specific plots
output$country_plot <- renderPlotly({
country_cases_plot(country_reactive_db(), start_point=input$start_date, input$minimum_date)
})
# country-specific plots
output$country_plot_cumulative <- renderPlotly({
country_cases_cumulative(country_reactive_db(), start_point=input$start_date, input$minimum_date)
})
# country-specific plots
output$country_plot_cumulative_log <- renderPlotly({
country_cases_cumulative_log(country_reactive_db(), start_point=input$start_date, input$minimum_date)
})
# country-specific plots
output$country_Risk_plot <- renderPlotly({
single_timeseries_plot(as.character(input$region_Risk_select))
})
output$rawtable <- renderPrint({
orig <- options(width = 1000)
print(tail(cv_cases %>% select(c(country, date, cases, new_cases, deaths, new_deaths,
recovered, new_recovered, active_cases,
per100k, newper100k, activeper100k, deathsper100k, newdeathsper100k)), input$maxrows), row.names = FALSE)
options(orig)
})
}
#runApp(shinyApp(ui, server), launch.browser = TRUE)
#shinyApp(ui, server)
#library(rsconnect)
#deployApp(account="vac-lshtm")
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
library(readr)
users <- read_csv("00_tab_login/users.csv")
View(users)
shiny::runApp()
# test function
cumulative_plot(cv_aggregated, current_date)
new_cases_plot(cv_aggregated, current_date)
runApp()
mainpage <- mainPanel(
tags$head(includeHTML("gtag.html")),
navbarPage(theme = shinytheme("flatly"), collapsible = TRUE,
"COVID-19 tracker", id="nav",
tabPanel("COVID-19 Mapper",
div(class="outer",
tags$head(includeCSS("styles.css")),
leafletOutput("mymap", width="100%", height="100%"),
absolutePanel(id = "controls", class = "panel panel-default",
top = 300, left = 55, width = 250, fixed=TRUE,
draggable = TRUE, height = "auto",
# span(tags$i(h6("Reported cases are subject to significant variation in testing policy and capacity between countries.")), style="color:#045a8d"),
h3(textOutput("reactive_case_count"), align = "right"),
h4(textOutput("reactive_death_count"), align = "right"),
# span(h4(textOutput("reactive_recovered_count"), align = "right"), style="color:#006d2c"),
# span(h4(textOutput("reactive_active_count"), align = "right"), style="color:#cc4c02"),
h6(textOutput("clean_date_reactive"), align = "right"),
h6(textOutput("reactive_country_count"), align = "right"),
plotOutput("epi_curve", height="130px", width="100%"),
plotOutput("cumulative_plot", height="130px", width="100%"),
sliderInput("plot_date",
label = h5("Select mapping date"),
min = as.Date(cv_min_date,"%Y-%m-%d"),
max = as.Date(current_date,"%Y-%m-%d"),
value = as.Date(current_date),
timeFormat = "%d %b",
animate=animationOptions(interval = 3000, loop = FALSE))
)
#,
#absolutePanel(id = "logo", class = "card", bottom = 20, left = 60, width = 80, fixed=TRUE, draggable = FALSE, height = "auto",
#              tags$a(href='https://www.lshtm.ac.uk', tags$img(src='lshtm_dark.png',height='40',width='80'))),
#absolutePanel(id = "logo", class = "card", bottom = 20, left = 20, width = 30, fixed=TRUE, draggable = FALSE, height = "auto",
#             actionButton("twitter_share", label = "", icon = icon("twitter"),style='padding:5px',
#                         onclick = sprintf("window.open('%s')",
#                                          "https://twitter.com/intent/tweet?text=%20@LSHTM_Vaccines%20outbreak%20mapper&url=https://bit.ly/2uBvnds&hashtags=coronavirus")))
)
),
tabPanel("Region plots",
sidebarLayout(
sidebarPanel(
#  span(tags$i(h6("Reported cases are subject to significant variation in testing policy and capacity between countries.")), style="color:#045a8d"),
# span(tags$i(h6("Occasional anomalies (e.g. spikes in daily case counts) are generally caused by changes in case definitions.")), style="color:#045a8d"),
pickerInput("level_select", "Level:",
choices = c("Country"),
selected = c("Country"),
multiple = FALSE),
pickerInput("region_select", "Country/Region:",
choices = as.character(cv_today_reduced[order(-cv_today_reduced$cases),]$country),
options = list(`actions-box` = TRUE, `none-selected-text` = "Please make a selection!"),
selected = as.character(cv_today_reduced[order(-cv_today_reduced$cases),]$country)[1:10],
multiple = TRUE),
pickerInput("outcome_select", "Outcome:",
choices = c("Deaths per 100,000", "Cases per 100,000", "Cases (total)", "Deaths (total)"),
selected = c("Deaths per 100,000"),
multiple = FALSE),
pickerInput("start_date", "Plotting start date:",
choices = c("Date", "Day of 100th confirmed case", "Day of 10th death"),
options = list(`actions-box` = TRUE),
selected = "Date",
multiple = FALSE),
sliderInput("minimum_date",
"Minimum date:",
min = as.Date(cv_min_date,"%Y-%m-%d"),
max = as.Date(current_date,"%Y-%m-%d"),
value=as.Date(cv_min_date),
timeFormat="%d %b"),
#"Select outcome, regions, and plotting start date from drop-down menues to update plots. Countries with at least 1000 confirmed cases are included."
),
mainPanel(
tabsetPanel(
tabPanel("Cumulative", plotlyOutput("country_plot_cumulative")),
tabPanel("New", plotlyOutput("country_plot")),
tabPanel("Cumulative (log10)", plotlyOutput("country_plot_cumulative_log"))
)
)
)
),
tabPanel("COVID-19 Risk mapper",
div(class="outer",
tags$head(includeCSS("styles.css")),
leafletOutput("my_risk_map", width="100%", height="100%"),
absolutePanel(id = "risk_controls", class = "panel panel-default",
top = 300, left = 55, width = 250, fixed=TRUE,
draggable = TRUE, height = "auto",
# span(tags$i(h6("Reported cases are subject to significant variation in testing policy and capacity between countries.")), style="color:#045a8d"),
# h3(textOutput("reactive_case_count"), align = "right"),
# h4(textOutput("reactive_death_count"), align = "right"),
# span(h4(textOutput("reactive_recovered_count"), align = "right"), style="color:#006d2c"),
# span(h4(textOutput("reactive_active_count"), align = "right"), style="color:#cc4c02"),
# h6(textOutput("clean_date_reactive"), align = "right"),
# h6(textOutput("reactive_country_count"), align = "right"),
# plotOutput("epi_curve", height="130px", width="100%"),
# plotOutput("cumulative_plot", height="130px", width="100%"),
sliderInput("plot_risk_date",
label = h5("Select mapping date"),
min = as.Date(cv_min_date,"%Y-%m-%d"),
max = as.Date(current_date,"%Y-%m-%d"),
value = as.Date(current_date),
timeFormat = "%d %b",
animate=animationOptions(interval = 3000, loop = FALSE))
)
#,
#absolutePanel(id = "logo", class = "card", bottom = 20, left = 60, width = 80, fixed=TRUE, draggable = FALSE, height = "auto",
#              tags$a(href='https://www.lshtm.ac.uk', tags$img(src='lshtm_dark.png',height='40',width='80'))),
#absolutePanel(id = "logo", class = "card", bottom = 20, left = 20, width = 30, fixed=TRUE, draggable = FALSE, height = "auto",
#             actionButton("twitter_share", label = "", icon = icon("twitter"),style='padding:5px',
#                         onclick = sprintf("window.open('%s')",
#                                          "https://twitter.com/intent/tweet?text=%20@LSHTM_Vaccines%20outbreak%20mapper&url=https://bit.ly/2uBvnds&hashtags=coronavirus")))
)
),
tabPanel("Risk plots",
sidebarLayout(
sidebarPanel(
#  span(tags$i(h6("Reported cases are subject to significant variation in testing policy and capacity between countries.")), style="color:#045a8d"),
# span(tags$i(h6("Occasional anomalies (e.g. spikes in daily case counts) are generally caused by changes in case definitions.")), style="color:#045a8d"),
pickerInput("level_Risk_select", "Level:",
choices = c( "Country"),
selected = c("Country"),
multiple = FALSE),
pickerInput("region_Risk_select", "Country/Region:",
choices = as.character(colnames(risk[2:176])),
options = list(`actions-box` = TRUE, `none-selected-text` = "Please make a selection!"),
selected = as.character(colnames(risk[2])),
multiple = FALSE),
"Select outcome, regions, and plotting start date from drop-down menues to update plots. Countries with at least 1000 confirmed cases are included."
),
mainPanel(
tabsetPanel(
tabPanel("Risk Factor", plotlyOutput("country_Risk_plot_cumulative"))
)
)
)
),
tabPanel("Data",
numericInput("maxrows", "Rows to show", 25),
verbatimTextOutput("rawtable"),
downloadButton("downloadCsv", "Download as CSV"),tags$br(),tags$br(),
"Adapted from timeline data published by ", tags$a(href="https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_time_series",
"Johns Hopkins Center for Systems Science and Engineering.")
)
)
)
runApp()
runApp()
runApp()
shiny::runApp()
mainpage <- mainPanel(
tags$head(includeHTML("gtag.html")),
navbarPage(theme = shinytheme("flatly"), collapsible = TRUE,
"COVID-19 Tracker", id="nav",
tabPanel("COVID-19 Mapper",
div(class="outer",
tags$head(includeCSS("styles.css")),
leafletOutput("mymap", width="100%", height="100%"),
absolutePanel(id = "controls", class = "panel panel-default",
top = 300, left = 55, width = 250, fixed=TRUE,
draggable = TRUE, height = "auto",
# span(tags$i(h6("Reported cases are subject to significant variation in testing policy and capacity between countries.")), style="color:#045a8d"),
h3(textOutput("reactive_case_count"), align = "right"),
h4(textOutput("reactive_death_count"), align = "right"),
# span(h4(textOutput("reactive_recovered_count"), align = "right"), style="color:#006d2c"),
# span(h4(textOutput("reactive_active_count"), align = "right"), style="color:#cc4c02"),
h6(textOutput("clean_date_reactive"), align = "right"),
h6(textOutput("reactive_country_count"), align = "right"),
plotOutput("epi_curve", height="130px", width="100%"),
plotOutput("cumulative_plot", height="130px", width="100%"),
sliderInput("plot_date",
label = h5("Select mapping date"),
min = as.Date(cv_min_date,"%Y-%m-%d"),
max = as.Date(current_date,"%Y-%m-%d"),
value = as.Date(current_date),
timeFormat = "%d %b",
animate=animationOptions(interval = 3000, loop = FALSE))
)
#,
#absolutePanel(id = "logo", class = "card", bottom = 20, left = 60, width = 80, fixed=TRUE, draggable = FALSE, height = "auto",
#              tags$a(href='https://www.lshtm.ac.uk', tags$img(src='lshtm_dark.png',height='40',width='80'))),
#absolutePanel(id = "logo", class = "card", bottom = 20, left = 20, width = 30, fixed=TRUE, draggable = FALSE, height = "auto",
#             actionButton("twitter_share", label = "", icon = icon("twitter"),style='padding:5px',
#                         onclick = sprintf("window.open('%s')",
#                                          "https://twitter.com/intent/tweet?text=%20@LSHTM_Vaccines%20outbreak%20mapper&url=https://bit.ly/2uBvnds&hashtags=coronavirus")))
)
),
tabPanel("Region Plots",
sidebarLayout(
sidebarPanel(
#  span(tags$i(h6("Reported cases are subject to significant variation in testing policy and capacity between countries.")), style="color:#045a8d"),
# span(tags$i(h6("Occasional anomalies (e.g. spikes in daily case counts) are generally caused by changes in case definitions.")), style="color:#045a8d"),
pickerInput("level_select", "Level:",
choices = c("Country"),
selected = c("Country"),
multiple = FALSE),
pickerInput("region_select", "Country/Region:",
choices = as.character(cv_today_reduced[order(-cv_today_reduced$cases),]$country),
options = list(`actions-box` = TRUE, `none-selected-text` = "Please make a selection!"),
selected = as.character(cv_today_reduced[order(-cv_today_reduced$cases),]$country)[1:10],
multiple = TRUE),
pickerInput("outcome_select", "Outcome:",
choices = c("Deaths per 100,000", "Cases per 100,000", "Cases (total)", "Deaths (total)"),
selected = c("Deaths per 100,000"),
multiple = FALSE),
pickerInput("start_date", "Plotting start date:",
choices = c("Date", "Day of 100th confirmed case", "Day of 10th death"),
options = list(`actions-box` = TRUE),
selected = "Date",
multiple = FALSE),
sliderInput("minimum_date",
"Minimum date:",
min = as.Date(cv_min_date,"%Y-%m-%d"),
max = as.Date(current_date,"%Y-%m-%d"),
value=as.Date(cv_min_date),
timeFormat="%d %b"),
#"Select outcome, regions, and plotting start date from drop-down menues to update plots. Countries with at least 1000 confirmed cases are included."
),
mainPanel(
tabsetPanel(
tabPanel("Cumulative", plotlyOutput("country_plot_cumulative")),
tabPanel("New", plotlyOutput("country_plot")),
tabPanel("Cumulative (log10)", plotlyOutput("country_plot_cumulative_log"))
)
)
)
),
tabPanel("COVID-19 Risk Mapper",
div(class="outer",
tags$head(includeCSS("styles.css")),
leafletOutput("my_risk_map", width="100%", height="100%"),
absolutePanel(id = "risk_controls", class = "panel panel-default",
top = 300, left = 55, width = 250, fixed=TRUE,
draggable = TRUE, height = "auto",
# span(tags$i(h6("Reported cases are subject to significant variation in testing policy and capacity between countries.")), style="color:#045a8d"),
# h3(textOutput("reactive_case_count"), align = "right"),
# h4(textOutput("reactive_death_count"), align = "right"),
# span(h4(textOutput("reactive_recovered_count"), align = "right"), style="color:#006d2c"),
# span(h4(textOutput("reactive_active_count"), align = "right"), style="color:#cc4c02"),
# h6(textOutput("clean_date_reactive"), align = "right"),
# h6(textOutput("reactive_country_count"), align = "right"),
# plotOutput("epi_curve", height="130px", width="100%"),
# plotOutput("cumulative_plot", height="130px", width="100%"),
sliderInput("plot_risk_date",
label = h5("Select mapping date"),
min = as.Date(cv_min_date,"%Y-%m-%d"),
max = as.Date(current_date,"%Y-%m-%d"),
value = as.Date(current_date),
timeFormat = "%d %b",
animate=animationOptions(interval = 3000, loop = FALSE))
)
#,
#absolutePanel(id = "logo", class = "card", bottom = 20, left = 60, width = 80, fixed=TRUE, draggable = FALSE, height = "auto",
#              tags$a(href='https://www.lshtm.ac.uk', tags$img(src='lshtm_dark.png',height='40',width='80'))),
#absolutePanel(id = "logo", class = "card", bottom = 20, left = 20, width = 30, fixed=TRUE, draggable = FALSE, height = "auto",
#             actionButton("twitter_share", label = "", icon = icon("twitter"),style='padding:5px',
#                         onclick = sprintf("window.open('%s')",
#                                          "https://twitter.com/intent/tweet?text=%20@LSHTM_Vaccines%20outbreak%20mapper&url=https://bit.ly/2uBvnds&hashtags=coronavirus")))
)
),
tabPanel("Risk Plots",
sidebarLayout(
sidebarPanel(
#  span(tags$i(h6("Reported cases are subject to significant variation in testing policy and capacity between countries.")), style="color:#045a8d"),
# span(tags$i(h6("Occasional anomalies (e.g. spikes in daily case counts) are generally caused by changes in case definitions.")), style="color:#045a8d"),
pickerInput("level_Risk_select", "Level:",
choices = c( "Country"),
selected = c("Country"),
multiple = FALSE),
pickerInput("region_Risk_select", "Country/Region:",
choices = as.character(colnames(risk[2:176])),
options = list(`actions-box` = TRUE, `none-selected-text` = "Please make a selection!"),
selected = as.character(colnames(risk[2])),
multiple = FALSE),
"Select outcome, regions, and plotting start date from drop-down menues to update plots. Countries with at least 1000 confirmed cases are included."
),
mainPanel(
tabsetPanel(
tabPanel("Risk Factor", plotlyOutput("country_Risk_plot_cumulative"))
)
)
)
),
tabPanel("Data",
numericInput("maxrows", "Rows to show", 25),
verbatimTextOutput("rawtable"),
downloadButton("downloadCsv", "Download as CSV"),tags$br(),tags$br(),
"Adapted from timeline data published by ", tags$a(href="https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_time_series",
"Johns Hopkins Center for Systems Science and Engineering.")
)
)
)
shiny::runApp()
shiny::runApp()
